function onload(save_state)
    -- Table initialization
    invControllerButton = {}
    invControllerCharacterSheet = {}
    invControllerInvCard = {}
    invControllerHiddenTextAbove = {}
    invControllerHiddenTextBelow = {}
    invControllerStartingTextLength = {}

    -- Object Config
    invController = getObjectFromGUID('aad6e8')
    invControllerDisplay = getObjectFromGUID('0d093a')

    invControllerButton['red'] = getObjectFromGUID('f2b44d')
    invControllerButton['orange'] = getObjectFromGUID('b189da')
    invControllerButton['yellow'] = getObjectFromGUID('649d04')
    invControllerButton['green'] = getObjectFromGUID('10dea3')
    invControllerButton['blue'] = getObjectFromGUID('0a66ae')
    invControllerButton['purple'] = getObjectFromGUID('23f579')

    invControllerInvCard['master'] = getObjectFromGUID('ee09de')
    invControllerInvCard['red'] = getObjectFromGUID('3f7d23')
    invControllerInvCard['orange'] = getObjectFromGUID('9865b6')
    invControllerInvCard['yellow'] = getObjectFromGUID('f26985')
    invControllerInvCard['green'] = getObjectFromGUID('2780ad')
    invControllerInvCard['blue'] = getObjectFromGUID('977184')
    invControllerInvCard['purple'] = getObjectFromGUID('055c17')

    invControllerCharacterSheet['red'] = getObjectFromGUID('484e89')
    invControllerCharacterSheet['orange'] = getObjectFromGUID('27cb8b')
    invControllerCharacterSheet['yellow'] = getObjectFromGUID('ae3a8d')
    invControllerCharacterSheet['green'] = getObjectFromGUID('bddaf4')
    invControllerCharacterSheet['blue'] = getObjectFromGUID('ee8a03')
    invControllerCharacterSheet['purple'] = getObjectFromGUID('25910c')

    redCharactersheetCounterGUIDs = {'ecfc82','5fbb7b','4363c2','665f1f','3ca728','fccced'}
    orangeCharactersheetCounterGUIDs = {'0d2655','a41d65','365b53','f29eb6','4a2282','bf19eb'}
    yellowCharactersheetCounterGUIDs = {'ac80ac','24effb','83aedd','079880','3c15de','a5c79e'}
    greenCharactersheetCounterGUIDs = {'763818','4f877d','413bdd','53a22d','c01f47','f2cee2'}
    blueCharactersheetCounterGUIDs = {'79c545','bb48d1','9e38d1','7c4408','0bb964','5adb6f'}
    purpleCharactersheetCounterGUIDs = {'8a6614','7ca4f5','e6a851','c405e9','c23b16','af6540'}

    DMIsHealthController = getObjectFromGUID('e4fb05')
    playerIsHealthController = getObjectFromGUID('f7eb09')

    DMSkillCounterGUIDs = {'d05e4e','859337','8a0e67','ba1d15','b9fb4c','f403ae'}
    DMHealthCounterGUIDs = {'591edd','1a039e','2513de','0c5edf','283218','af016f'}
    playerHealthCounterGUIDs = {'bf1d7e','c8a982','3503be','5d1212','2734fd','c89e65'}

    -- Edit below this line at your own risk.

    -- Creates buttons
    invController.setTable('pos',{0,1.289,10.2})
    invController.setTable('rot',{0,0,0})
    Global.call('addButton', {invController.getGUID(),7100,1000,500,'Update','push',self})
    invController.setTable('pos',{0,1.289,12.2})
    Global.call('addButton', {invController.getGUID(),7100,1000,500,'Full Text','tempFullText',self})
    invController.setTable('pos',{0,1.289,14.2})
    Global.call('addButton', {invController.getGUID(),7100,1000,500,'Above','tempAbove',self})
    invController.setTable('pos',{0,1.289,16.2})
    Global.call('addButton', {invController.getGUID(),7100,1000,500,'Below','tempBelow',self})

    DMIsHealthController.setVar('Controller', 'DM')
    DMIsHealthController.setTable('pos',{0,-0.1,-3.1})
    DMIsHealthController.setTable('rot',{0,270,0})
    Global.call('addButton', {DMIsHealthController.getGUID(),2650,700,450,'The Dungeon Master','updateHealthController',self})
    playerIsHealthController.setVar('Controller', 'Player')
    playerIsHealthController.setTable('pos',{0,-0.1,-3.1})
    playerIsHealthController.setTable('rot',{0,270,0})
    Global.call('addButton', {playerIsHealthController.getGUID(),2650,700,450,'The Player','updateHealthController',self})

    invControllerInvCard['master'].setVar('color', 'master')
    invControllerInvCard['master'].setTable('pos',{-0.62,3,0.26})
    invControllerInvCard['master'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['master'].getGUID(), 280,10,50,'>','scrollUp',self})
    invControllerInvCard['master'].setTable('pos',{-0.62,3,-0.26})
    invControllerInvCard['master'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['master'].getGUID(), 280,10,50,'<','scrollDown',self})

    invControllerButton['red'].setVar('color','red')
    invControllerButton['red'].setTable('pos',{0,-0.2,0})
    invControllerButton['red'].setTable('rot',{180,90,0})
    Global.call('addButton', {invControllerButton['red'].getGUID(),1350,600,400,'Red','selectPlayer',self})
    invControllerInvCard['red'].setVar('color', 'red')
    invControllerInvCard['red'].setTable('pos',{-0.62,3,0.26})
    invControllerInvCard['red'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['red'].getGUID(), 280,10,50,'>','scrollUp',self})
    invControllerInvCard['red'].setTable('pos',{-0.62,3,-0.26})
    invControllerInvCard['red'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['red'].getGUID(), 280,10,50,'<','scrollDown',self})

    invControllerButton['orange'].setVar('color','orange')
    invControllerButton['orange'].setTable('pos',{0,-0.2,0})
    invControllerButton['orange'].setTable('rot',{180,90,0})
    Global.call('addButton', {invControllerButton['orange'].getGUID(),1350,600,400,'Orange','selectPlayer',self})
    invControllerInvCard['orange'].setVar('color', 'orange')
    invControllerInvCard['orange'].setTable('pos',{-0.62,3,0.26})
    invControllerInvCard['orange'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['orange'].getGUID(), 280,10,50,'>','scrollUp',self})
    invControllerInvCard['orange'].setTable('pos',{-0.62,3,-0.26})
    invControllerInvCard['orange'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['orange'].getGUID(), 280,10,50,'<','scrollDown',self})

    invControllerButton['yellow'].setVar('color','yellow')
    invControllerButton['yellow'].setTable('pos',{0,-0.2,0})
    invControllerButton['yellow'].setTable('rot',{180,90,0})
    Global.call('addButton', {invControllerButton['yellow'].getGUID(),1350,600,400,'Yellow','selectPlayer',self})
    invControllerInvCard['yellow'].setVar('color', 'yellow')
    invControllerInvCard['yellow'].setTable('pos',{-0.62,3,0.26})
    invControllerInvCard['yellow'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['yellow'].getGUID(), 280,10,50,'>','scrollUp',self})
    invControllerInvCard['yellow'].setTable('pos',{-0.62,3,-0.26})
    invControllerInvCard['yellow'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['yellow'].getGUID(), 280,10,50,'<','scrollDown',self})

    invControllerButton['green'].setVar('color','green')
    invControllerButton['green'].setTable('pos',{0,-0.2,0})
    invControllerButton['green'].setTable('rot',{180,90,0})
    Global.call('addButton', {invControllerButton['green'].getGUID(),1350,600,400,'Green','selectPlayer',self})
    invControllerInvCard['green'].setVar('color', 'green')
    invControllerInvCard['green'].setTable('pos',{-0.62,3,0.26})
    invControllerInvCard['green'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['green'].getGUID(), 280,10,50,'>','scrollUp',self})
    invControllerInvCard['green'].setTable('pos',{-0.62,3,-0.26})
    invControllerInvCard['green'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['green'].getGUID(), 280,10,50,'<','scrollDown',self})

    invControllerButton['blue'].setVar('color','blue')
    invControllerButton['blue'].setTable('pos',{0,-0.2,0})
    invControllerButton['blue'].setTable('rot',{180,90,0})
    Global.call('addButton', {invControllerButton['blue'].getGUID(),1350,600,400,'Blue','selectPlayer',self})
    invControllerInvCard['blue'].setVar('color', 'blue')
    invControllerInvCard['blue'].setTable('pos',{-0.62,3,0.26})
    invControllerInvCard['blue'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['blue'].getGUID(), 280,10,50,'>','scrollUp',self})
    invControllerInvCard['blue'].setTable('pos',{-0.62,3,-0.26})
    invControllerInvCard['blue'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['blue'].getGUID(), 280,10,50,'<','scrollDown',self})

    invControllerButton['purple'].setVar('color','purple')
    invControllerButton['purple'].setTable('pos',{0,-0.2,0})
    invControllerButton['purple'].setTable('rot',{180,90,0})
    Global.call('addButton', {invControllerButton['purple'].getGUID(),1350,600,400,'Purple','selectPlayer',self})
    invControllerInvCard['purple'].setVar('color', 'purple')
    invControllerInvCard['purple'].setTable('pos',{-0.62,3,0.26})
    invControllerInvCard['purple'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['purple'].getGUID(), 280,10,50,'>','scrollUp',self})
    invControllerInvCard['purple'].setTable('pos',{-0.62,3,-0.26})
    invControllerInvCard['purple'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['purple'].getGUID(), 280,10,50,'<','scrollDown',self})

    -- Creates counters
    invControllerCharacterSheet['red'].setTable('counters_t',createCounters(redCharactersheetCounterGUIDs))
    invControllerCharacterSheet['orange'].setTable('counters_t',createCounters(orangeCharactersheetCounterGUIDs))
    invControllerCharacterSheet['yellow'].setTable('counters_t',createCounters(yellowCharactersheetCounterGUIDs))
    invControllerCharacterSheet['green'].setTable('counters_t',createCounters(greenCharactersheetCounterGUIDs))
    invControllerCharacterSheet['blue'].setTable('counters_t',createCounters(blueCharactersheetCounterGUIDs))
    invControllerCharacterSheet['purple'].setTable('counters_t',createCounters(purpleCharactersheetCounterGUIDs))

    DMHealthCounters = createCounters(DMHealthCounterGUIDs)
    DMSkillCounters = createCounters(DMSkillCounterGUIDs)
    playerHealthCounters = createCounters(playerHealthCounterGUIDs)

    -- Additional setup
    invControllerInvCard['master'].setName('Inventory Manager')
    invControllerInvCard['master'].setDescription('Select a player below and their inventory will be pulled to this card. Any changes you may have made will be sent when clicking "Update"\n\nSelecting a player will tint the highlight bar above with the respective color and the player\'s skills be updated in the counters above that.') -- Clear invControllerInvCard['master']
    invControllerHiddenTextAbove['master'] = ''
    invControllerHiddenTextBelow['master'] = ''
    invControllerDisplay.setColorTint({1,1,1}) -- Set highlight bar to White
    seconds=0 frame=0 -- Used by the update function

    local savedVars = JSON.decode(save_state)
    invControllerHiddenTextAbove['red'] = savedVars['redAbove']
    invControllerHiddenTextAbove['orange'] = savedVars['orangeAbove']
    invControllerHiddenTextAbove['yellow'] = savedVars['yellowAbove']
    invControllerHiddenTextAbove['green'] = savedVars['greenAbove']
    invControllerHiddenTextAbove['blue'] = savedVars['blueAbove']
    invControllerHiddenTextAbove['purple'] = savedVars['purpleAbove']
    invControllerHiddenTextBelow['red'] = savedVars['redBelow']
    invControllerHiddenTextBelow['orange'] = savedVars['orangeBelow']
    invControllerHiddenTextBelow['yellow'] = savedVars['yellowBelow']
    invControllerHiddenTextBelow['green'] = savedVars['greenBelow']
    invControllerHiddenTextBelow['blue'] = savedVars['blueBelow']
    invControllerHiddenTextBelow['purple'] = savedVars['purpleBelow']
    invControllerStartingTextLength['red'] = savedVars['redLength']
    invControllerStartingTextLength['orange'] = savedVars['orangeLength']
    invControllerStartingTextLength['yellow'] = savedVars['yellowLength']
    invControllerStartingTextLength['green'] = savedVars['greenLength']
    invControllerStartingTextLength['blue'] = savedVars['blueLength']
    invControllerStartingTextLength['purple'] = savedVars['purpleLength']
    healthController = savedVars['healthController']

    characterWidthTable = {
        ['`'] = 2381, ['~'] = 2381, ['1'] = 1724, ['!'] = 1493, ['2'] = 2381,
        ['@'] = 4348, ['3'] = 2381, ['#'] = 3030, ['4'] = 2564, ['$'] = 2381,
        ['5'] = 2381, ['%'] = 3846, ['6'] = 2564, ['^'] = 2564, ['7'] = 2174,
        ['&'] = 2777, ['8'] = 2564, ['*'] = 2174, ['9'] = 2564, ['('] = 1724,
        ['0'] = 2564, [')'] = 1724, ['-'] = 1724, ['_'] = 2381, ['='] = 2381,
        ['+'] = 2381, ['q'] = 2564, ['Q'] = 3226, ['w'] = 3704, ['W'] = 4167,
        ['e'] = 2174, ['E'] = 2381, ['r'] = 1724, ['R'] = 2777, ['t'] = 1724,
        ['T'] = 2381, ['y'] = 2564, ['Y'] = 2564, ['u'] = 2564, ['U'] = 3030,
        ['i'] = 1282, ['I'] = 1282, ['o'] = 2381, ['O'] = 3226, ['p'] = 2564,
        ['P'] = 2564, ['['] = 1724, ['{'] = 1724, [']'] = 1724, ['}'] = 1724,
        ['|'] = 1493, ['\\'] = 1923, ['a'] = 2564, ['A'] = 2777, ['s'] = 1923,
        ['S'] = 2381, ['d'] = 2564, ['D'] = 3030, ['f'] = 1724, ['F'] = 2381,
        ['g'] = 2564, ['G'] = 2777, ['h'] = 2564, ['H'] = 3030, ['j'] = 1075,
        ['J'] = 1282, ['k'] = 2381, ['K'] = 2777, ['l'] = 1282, ['L'] = 2174,
        [';'] = 1282, [':'] = 1282, ['\''] = 855, ['"'] = 1724, ['z'] = 1923,
        ['Z'] = 2564, ['x'] = 2381, ['X'] = 2777, ['c'] = 1923, ['C'] = 2564,
        ['v'] = 2564, ['V'] = 2777, ['b'] = 2564, ['B'] = 2564, ['n'] = 2564,
        ['N'] = 3226, ['m'] = 3846, ['M'] = 3846, [','] = 1282, ['<'] = 2174,
        ['.'] = 1282, ['>'] = 2174, ['/'] = 1923, ['?'] = 2174, [' '] = 1282,
        ['\t'] = 5128, ['\r'] = 0, ['\n'] = 100000
    }
end

function onSave()
    local savedVars = {}
    savedVars['redAbove'] = invControllerHiddenTextAbove['red']
    savedVars['orangeAbove'] = invControllerHiddenTextAbove['orange']
    savedVars['yellowAbove'] = invControllerHiddenTextAbove['yellow']
    savedVars['greenAbove'] = invControllerHiddenTextAbove['green']
    savedVars['blueAbove'] = invControllerHiddenTextAbove['blue']
    savedVars['purpleAbove'] = invControllerHiddenTextAbove['purple']
    savedVars['redBelow'] = invControllerHiddenTextBelow['red']
    savedVars['orangeBelow'] = invControllerHiddenTextBelow['orange']
    savedVars['yellowBelow'] = invControllerHiddenTextBelow['yellow']
    savedVars['greenBelow'] = invControllerHiddenTextBelow['green']
    savedVars['blueBelow'] = invControllerHiddenTextBelow['blue']
    savedVars['purpleBelow'] = invControllerHiddenTextBelow['purple']
    savedVars['redLength'] = invControllerStartingTextLength['red']
    savedVars['orangeLength'] = invControllerStartingTextLength['orange']
    savedVars['yellowLength'] = invControllerStartingTextLength['yellow']
    savedVars['greenLength'] = invControllerStartingTextLength['green']
    savedVars['blueLength'] = invControllerStartingTextLength['blue']
    savedVars['purpleLength'] = invControllerStartingTextLength['purple']
    savedVars['healthController'] = healthController
    return JSON.encode(savedVars)
end

function update()
    frame = frame + 1 --[[ Counts Frames ]]--
    if frame%60==0 then  --[[Every 60 Frames]]--
        seconds=seconds+1 --[[Adds a second]]--
        if seconds%2==0 then updateCounters()
        end
    end
end

function createCounters(table)
    newTable = {}
    for i=1,6 do
        newTable[i] = getObjectFromGUID(table[i])
    end
    return newTable
end

function selectPlayer(obj)
-- Changes selection of player and sets color of the highlight bar
-- Copies the selected player's inventory to the invControllerInvCard['master']
-- This function is called from a button - ergo obj is the button's object that made the call
    colorSelector = obj.getVar('color')
    updateSkillCounters(invControllerCharacterSheet[colorSelector].getTable('counters_t'))

    local fullText = getFullText(colorSelector)
    local newPage = getPage(fullText)
    invControllerInvCard['master'].setDescription(newPage)
    invControllerHiddenTextAbove['master'] = ''
    invControllerHiddenTextBelow['master'] = removeNewline(removeNewline(plainReplace(fullText,newPage,''),'Beginning'),'Ending')
    invControllerStartingTextLength['master'] = getLines(invControllerInvCard['master'].getDescription())

    setDisplayColor(colorSelector)
end

function push()
-- Updates the selected player's inventory to a copy of the invControllerInvCard['master']
    if colorSelector == nil then
        print("Select a color first!")
    else
        local fullText = getFullText('master')
        local newPage = getPage(fullText)
        invControllerInvCard[colorSelector].setDescription(newPage)
        invControllerHiddenTextAbove[colorSelector] = ''
        invControllerHiddenTextBelow[colorSelector] = removeNewline(removeNewline(plainReplace(fullText,newPage,''),'Beginning'),'Ending')
    end
end

function scrollUp(obj)
-- Concatenates the last 10 lines of the auxiliary inventory to the beginning of the main inventory.
-- This function is called from a button - ergo obj is the button that made the call.
    local color = obj.getVar('color')
    if invControllerHiddenTextAbove[color] ~= '' then
        local newPage = string.reverse(getPage(string.reverse(invControllerHiddenTextAbove[color])))..'\n'
        if obj.getDescription() ~= '' then
            local i = string.len(newPage)
            newPage = getPage(newPage..obj.getDescription())
            local j = string.len(newPage)
            if i < j then
                invControllerHiddenTextAbove[color] = removeNewline(plainReplace(invControllerHiddenTextAbove[color],string.sub(newPage,1,i-1),''),'Ending')
                invControllerHiddenTextBelow[color] = removeNewline(removeNewline(plainReplace(obj.getDescription(),string.sub(newPage,i+1,j),'')..'\n'..invControllerHiddenTextBelow[color],'Beginning'),'Ending')
            else
                invControllerHiddenTextAbove[color] = removeNewline(plainReplace(invControllerHiddenTextAbove[color],newPage,''),'Ending')
                invControllerHiddenTextBelow[color] = removeNewline(obj.getDescription()..'\n'..invControllerHiddenTextBelow[color],'Ending')
            end
        else
            invControllerHiddenTextAbove[color] = removeNewline(plainReplace(invControllerHiddenTextAbove[color],removeNewline(removeNewline(newPage,'Ending'),'Beginning'),''),'Ending')
        end
        obj.setDescription(removeNewline(removeNewline(newPage,'Ending'),'Beginning'))
        invControllerStartingTextLength[color] = getLines(obj.getDescription())
    end
end

function scrollDown(obj)
-- Concatenates the first 10 lines of the main inventory to the end of the auxiliary inventory.
-- This function is called from a button - ergo obj is the button that made the call.
    local color = obj.getVar('color')
    if obj.getDescription() ~= '' then
        local newPage = getPage(obj.getDescription())
        invControllerHiddenTextAbove[color] = removeNewline(invControllerHiddenTextAbove[color]..'\n'..newPage,'Beginning')
        local tempPage = string.sub(obj.getDescription(),string.len(newPage)+1,-1)
        if tempPage ~= '' then
            newPage = getPage(removeNewline(removeNewline(tempPage..'\n'..invControllerHiddenTextBelow[color],'Ending'),'Beginning'))
        else
            newPage = getPage(removeNewline(removeNewline(invControllerHiddenTextBelow[color],'Ending'),'Beginning'))
        end

        local extraLength1 = getLines(obj.getDescription())
        obj.setDescription(removeNewline(removeNewline(newPage,'Beginning'),'Ending'))
        local extraLength2 = extraLength1['lineCount'] - invControllerStartingTextLength[color]['lineCount']
        local extraLength3 = getLines(invControllerHiddenTextBelow[color])
        invControllerStartingTextLength[color] = getLines(obj.getDescription())

        if extraLength2 > 0 then
            extraLength2 = invControllerStartingTextLength[color]['lineCount'] - extraLength2
            local extraLength3 = getLines(invControllerHiddenTextBelow[color])
            local extraLength4 = extraLength3[extraLength2]
            invControllerHiddenTextBelow[color] = removeNewline(string.sub(invControllerHiddenTextBelow[color],extraLength4+1),'Beginning')
        else
            if string.len(obj.getDescription()) ~= string.len(invControllerHiddenTextBelow[color]) then
                invControllerHiddenTextBelow[color] = removeNewline(removeNewline(string.sub(invControllerHiddenTextBelow[color],string.len(obj.getDescription())+1),'Beginning'),'Ending')
            else
                invControllerHiddenTextBelow[color] = ''
            end
        end
    end
end

function getPage(invStr)
-- Iterates through the str and sums the estimated line length based on characterWidthTable for each character in a max 100000 system. Margin for error is 200.
    local lineWidth = 0
    local lineCount = 0
    local placeholder = 1
    local key = ''
    local page = ''
    local i = 1
    while lineCount ~= 9 do
        key = string.sub(invStr, i, i)
        if key == '' then
            page = page..string.sub(invStr,placeholder,i)
            break
        end
        lineWidth = lineWidth + characterWidthTable[key]
        if lineWidth > 99800 then
            if key == '\n' then
                page = page..string.sub(invStr,placeholder,i-1)
                placeholder = i
            else
                page = page..string.sub(invStr,placeholder,i)
                placeholder = i + 1
            end
            lineCount = lineCount + 1
            lineWidth = 0
        end
        i = i + 1
    end
    return page
end

function getLines(str)
    -- Returns a table countaining the number of lines in a string as well as the location of the end of each line.
    local lineWidth = 0
    local lineCount = 0
    local length = string.len(str)
    local placeholder = 1
    local key = ''
    local lineTable = {}
    local i = 1
    while i < 2+string.len(str) do
        key = string.sub(str, i, i)
        if key == '' then
            lineCount = lineCount + 1
            break
        end
        lineWidth = lineWidth + characterWidthTable[key]
        if lineWidth > 99800 then
            if key == '\n' then
                lineTable[lineCount+1] = i-1
                placeholder = i
            else
                lineTable[lineCount+1] = i
                placeholder = i + 1
            end
            lineCount = lineCount + 1
            lineWidth = 0
        end
        i = i + 1
    end
    lineTable['length'] = length
    lineTable['lineCount'] = lineCount
    return lineTable
end

function removeNewline(str, location)
    if location == 'Beginning' then
        while string.sub(str,1,1) == '\n' do
            str = string.sub(str,2,-1)
        end
        return str
    elseif location == 'Ending' then
        while string.sub(str,-1,-1) == '\n' do
            str = string.sub(str,1,-2)
        end
        return str
    end
end

function tempFullText()
    print('Full Text: ', getFullText('master'))
end

function tempAbove()
    print('Above: ', invControllerHiddenTextAbove['master'])
end

function tempBelow()
    print('Below: ', invControllerHiddenTextBelow['master'])
end

function getFullText(color)
    local fullText = invControllerInvCard[color].getDescription()
    if invControllerHiddenTextAbove[color] ~= '' then
        fullText = invControllerHiddenTextAbove[color]..'\n'..fullText
    end
    if invControllerHiddenTextBelow[color] ~= '' then
        fullText = fullText..'\n'..invControllerHiddenTextBelow[color]
    end
    return fullText
end

function plainReplace(str, pattern, replacement)
    local x,y = str:find(pattern,1,true)
    if x==nil then
       return str
    else
       return str:sub(1,x-1)..replacement..str:sub(y+1)
    end
end

function setDisplayColor(color)
-- Sets color of highlight bar, receives color as string | setDisplayColor("blue")
    local tint = {}
    tint['red'] = {0.856,0.1,0.094}
    tint['orange'] = {0.956,0.392,0.113}
    tint['yellow'] = {0.905,0.898,0.172}
    tint['green'] = {0.192,0.701,0.168}
    tint['blue'] = {0.118,0.53,1.0}
    tint['purple'] = {0.627,0.125,0.941}
    invControllerDisplay.setColorTint(tint[color])
end

function updateCounters()
    if healthController=='DM' then
        for i=1,6 do
            playerHealthCounters[i].setValue(DMHealthCounters[i].getValue())
        end
    else
        for i=1,6 do
            DMHealthCounters[i].setValue(playerHealthCounters[i].getValue())
        end
    end
end

function updateSkillCounters(skillCounters)
    for i=1,6 do
        DMSkillCounters[i].setValue(skillCounters[i].getValue())
    end
end

function updateHealthController(obj)
    if obj.getVar('Controller') == 'DM' then
        healthController = 'DM'
        DMIsHealthController.setColorTint({0,1,0})
        playerIsHealthController.setColorTint({0,0,0})
    elseif obj.getVar('Controller') == 'Player' then
        healthController = 'Player'
        DMIsHealthController.setColorTint({0,0,0})
        playerIsHealthController.setColorTint({0,1,0})
    end
end
