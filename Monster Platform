-- GLOBAL

monsterPlatformBrainGUID = 'b03ee1'
monsterPlatformBrain = getObjectFromGUID(monsterPlatformBrainGUID)

function onObjectEnterScriptingZone(zone, enter_object)
    if enter_object.getVar('cardname') ~= nil then
        monsterPlatformZoneGUID = monsterPlatformBrain.getTable('monsterPlatformZoneGUID')
        if zone.getGUID() == monsterPlatformZoneGUID[1] then
            monsterPlatformBrain.call('onCardEnter', {enter_object, 1})
        elseif zone.getGUID() == monsterPlatformZoneGUID[2] then
            monsterPlatformBrain.call('onCardEnter', {enter_object, 2})
        end
    end
end

function onObjectLeaveScriptingZone(zone, leave_object)
    if leave_object.getVar('cardname') ~= nil then
        monsterPlatformZoneGUID = monsterPlatformBrain.getTable('monsterPlatformZoneGUID')
        if zone.getGUID() == monsterPlatformZoneGUID[1] then
            monsterPlatformBrain.call('onCardLeave', {leave_object, 1})
        elseif zone.getGUID() == monsterPlatformZoneGUID[2] then
            monsterPlatformBrain.call('onCardLeave', {leave_object, 2})
        end
    end
end


-- MONSTER PLATFORM BRAIN

function onload()
    -- Table initialization
    monsterPlatform = {}
    monsterPlatformValueCounterGUIDs = {}
    monsterPlatformNameCard = {}
    monsterPlatformDescCard = {}
    monsterPlatformZoneGUID = {}

    -- Sets the objects and variables for use.
    monsterPlatform[1] = getObjectFromGUID('eea006')
    monsterPlatform[2] = getObjectFromGUID('93f732')
    monsterPlatformValueCounterGUIDs_1 = {'1ba1f5','7d7d5f','c0a4e4','a97acb','ce521a','ecccee','f95a0c','a172ae','3ed4a0','5f4dac','b79442','84e811'}
    monsterPlatformValueCounterGUIDs_2 = {'fdb867','30f108','5d74f1','8f8a8a','f57295','6a0df2','ba7208','159fab','c0fd41','1b6c44','1e7791','941cbd'}
    monsterPlatformNameCard[1] = getObjectFromGUID('2e0c03')
    monsterPlatformNameCard[2] = getObjectFromGUID('844fb6')
    monsterPlatformDescCard[1] = getObjectFromGUID('7db223')
    monsterPlatformDescCard[2] = getObjectFromGUID('f30f00')
    monsterPlatformZoneGUID[1] = '063a41' -- The reading zone for the first platform
    monsterPlatformZoneGUID[2] = 'f682c6' -- The reading zone for the second platform
    activeMiniZone1 = getObjectFromGUID('8fb40f') -- The zone in which minis will be updated

    displayEverything = getObjectFromGUID('ebea77')
    displaySome = getObjectFromGUID('4fb7c1')
    displayNothing = getObjectFromGUID('4bc9ee')

    -- Creates objects from counter GUIDs
    monsterPlatformValueCounters = {}
    monsterPlatformValueCounters[1] = {}
    monsterPlatformValueCounters[2] = {}
    for i=1,12 do
        monsterPlatformValueCounters[1][i] = getObjectFromGUID(monsterPlatformValueCounterGUIDs_1[i])
    end
    for i=1,12 do
        monsterPlatformValueCounters[2][i] = getObjectFromGUID(monsterPlatformValueCounterGUIDs_2[i])
    end

    -- Counts the cards currently on the platform.
    cardsOnMonsterPlatform = {}
    cardsOnMonsterPlatform[1] = 0
    cardsOnMonsterPlatform[2] = 0
    monsterPlatformZoneObjTable = {}
    monsterPlatformZoneObjTable[1] = getObjectFromGUID(monsterPlatformZoneGUID[1]).getObjects()
    monsterPlatformZoneObjTable[2] = getObjectFromGUID(monsterPlatformZoneGUID[2]).getObjects()
    for i,v in pairs(monsterPlatformZoneObjTable[1]) do
        if monsterPlatformZoneObjTable[1][i].getVar('cardname') ~= nil then
            cardsOnMonsterPlatform[1] = cardsOnMonsterPlatform[1] + 1
        end
    end
    for i,v in pairs(monsterPlatformZoneObjTable[2]) do
        if monsterPlatformZoneObjTable[2][i].getVar('cardname') ~= nil then
            cardsOnMonsterPlatform[2] = cardsOnMonsterPlatform[2] + 1
        end
    end

    -- Adds buttons and button variables
    monsterPlatform[1].setVar('platformNumber', 1)
    monsterPlatform[1].setTable('pos',{-7.15,0.1,0})
    monsterPlatform[1].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[1].getGUID(),1900,900,300,'Stat Counters','toggleStatCounters',self})
    monsterPlatform[1].setTable('pos',{-7.15,0.1,6.1})
    monsterPlatform[1].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[1].getGUID(),1900,900,300,'Copy Card','cloneCard',self})
    monsterPlatform[1].setTable('pos',{-7.15,0.1,-6.1})
    monsterPlatform[1].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[1].getGUID(),1900,900,300,'Reset','resetPlatform',self})
    monsterPlatform[1].setVar('platformNumber', 1)
    monsterPlatform[1].setTable('pos',{-5.1,0.1,0})
    monsterPlatform[1].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[1].getGUID(),1900,900,300,'2nd Platform','toggleSecondPlatform',self})
    monsterPlatform[1].setTable('pos',{7.1,0.1,0})
    monsterPlatform[1].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[1].getGUID(),7750,900,300,'Update Miniature(s)','forceUpdateMini',self})

    monsterPlatform[2].setVar('platformNumber', 2)
    monsterPlatform[2].setTable('pos',{-7.15,0.1,0})
    monsterPlatform[2].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[2].getGUID(),1900,900,300,'Stat Counters','toggleStatCounters',self})
    monsterPlatform[2].setTable('pos',{-7.15,0.1,6.1})
    monsterPlatform[2].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[2].getGUID(),1900,900,300,'Copy Card','cloneCard',self})
    monsterPlatform[2].setTable('pos',{-7.15,0.1,-6.1})
    monsterPlatform[2].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[2].getGUID(),1900,900,300,'Reset','resetPlatform',self})
    monsterPlatform[2].setTable('pos',{7.1,0.1,0})
    monsterPlatform[2].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[1].getGUID(),7750,900,300,'Update Miniature(s)','forceUpdateMini',self})

    displayEverything.setVar('miniDisplay','Everything')
    displayEverything.setTable('pos',{0,-0.1,-3.3})
    displayEverything.setTable('rot',{0,270,0})
    Global.call('addButton', {displayEverything.getGUID(),2550,500,300,'Display Everything','updateMiniDisplay',self})
    displaySome.setVar('miniDisplay','Some')
    displaySome.setTable('pos',{0,-0.1,-3.3})
    displaySome.setTable('rot',{0,270,0})
    Global.call('addButton', {displaySome.getGUID(),2550,500,300,'Display Everything','updateMiniDisplay',self})
    displayNothing.setVar('miniDisplay','Nothing')
    displayNothing.setTable('pos',{0,-0.1,-3.3})
    displayNothing.setTable('rot',{0,270,0})
    Global.call('addButton', {displayNothing.getGUID(),2550,500,300,'Display Nothing','updateMiniDisplay',self})

    -- Sets the variable to determine what information is sent to the miniatures via button color so as to preserve state across save/laod.
    if displayEverything.getColorTint()[2] == 1 then
        self.setVar('miniDisplay','Everything')
    elseif displaySome.getColorTint()[2] == 1 then
        self.setVar('miniDisplay','Some')
    else
        self.setVar('miniDisplay', 'Nothing')
    end
end

function forceUpdateMini(obj) -- Finds the card within the scripting zone and sends it to the core updateMini function.
    local parent
    local platNumber = obj.getVar('platformNumber')
    local zoneObjs = getObjectFromGUID(monsterPlatformZoneGUID[platNumber]).getObjects()
    for i,v in pairs(zoneObjs) do
        if zoneObjs[i].getVar('cardname') ~= nil then
            parent = zoneObjs[i]
        end
    end
    if parent ~= nil then
        updateMini(parent, platNumber)
    end
end

function updateMini(parent, platNumber) -- Takes a monster card and sends its values to be concatenated into the description of its children miniatures.
    for i=1,12 do
        parent.setVar('value'..i, monsterPlatformValueCounters[platNumber][i].getValue())
    end
    parent.setVar('monsterName', monsterPlatformNameCard[platNumber].getName():gsub("[%[%]]", "%%%0"))
    parent.setVar('monsterDesc', monsterPlatformDescCard[platNumber].getDescription():gsub("[%[%]]", "%%%0"))

    -- Sets values into the card's script to be preserved across saves.
    local tempScript = parent.getLuaScript()
    local QRPGVars = '--*&\n--This is QRPG code designed for use with the monster platform.\n'
    for i = 1,12 do
        QRPGVars = QRPGVars..'value'..i.." = "..monsterPlatformValueCounters[platNumber][i].getValue()..'\n'
    end
    QRPGVars = QRPGVars..'monsterName = \[\['..monsterPlatformNameCard[platNumber].getName()..'\]\]\n'..'monsterDesc = \[\['..monsterPlatformDescCard[platNumber].getDescription()..'\]\]\n--*&'

    if string.find(tempScript,'--*&') then
        local i = string.find(tempScript,'--*&',1)
        local j = string.find(tempScript,'--*&',i+4)
        parent.setLuaScript(string.sub(tempScript,1,i-1)..QRPGVars..string.sub(tempScript,j+4))
    else
        parent.setLuaScript(QRPGVars..'\n\n'..tempScript)
    end
    searchForMini(activeMiniZone1.getObjects(), parent, platNumber)
    -- Add additional zones to search here.
end

function searchForMini(objTable, parent, platNumber)  -- Searches the world and sets children miniatures with the correct descriptions based on display setting.
    local parentGUID = parent.getGUID()
    for i,v in pairs(objTable) do
        if objTable[i].getVar('mcardguid') == parentGUID then
            if self.getVar('miniDisplay') == 'Everything' or self.getVar('miniDisplay') == 'Some' then
                objTable[i].setName(parent.getVar('monsterName'))
                local tempDesc = parent.getVar('monsterDesc')
                if self.getVar('miniDisplay') == 'Some' then
                    objTable[i].setDescription(tempDesc)
                else
                    objTable[i].setDescription('')
                    for j=1,6 do
                        if monsterPlatformValueCounters[platNumber][j].getName() ~= '' then
                            objTable[i].setDescription(objTable[i].getDescription()..monsterPlatformValueCounters[platNumber][j].getName()..': '..monsterPlatformValueCounters[platNumber][j].getValue()..'    ')
                        end
                    end
                    objTable[i].setDescription(string.sub(objTable[i].getDescription(), 1, -5)..'\n'..tempDesc)
                end
            elseif self.getVar('miniDisplay') == 'Nothing' then
                objTable[i].setName('')
                objTable[i].setDescription('')
            end
        end
    end
end

function updateMiniDisplay(obj) -- Sets the variable to determine what information is sent to the miniatures.
        if obj.getVar('miniDisplay') == 'Everything' then
            self.setVar('miniDisplay', 'Everything')
            displayEverything.setColorTint({0,1,0})
            displaySome.setColorTint({0,0,0})
            displayNothing.setColorTint({0,0,0})
        elseif obj.getVar('miniDisplay') == 'Some' then
            self.setVar('miniDisplay', 'Some')
            displayEverything.setColorTint({0,0,0})
            displaySome.setColorTint({0,1,0})
            displayNothing.setColorTint({0,0,0})
        elseif obj.getVar('miniDisplay') == 'Nothing' then
            self.setVar('miniDisplay', 'Nothing')
            displayEverything.setColorTint({0,0,0})
            displaySome.setColorTint({0,0,0})
            displayNothing.setColorTint({0,1,0})
        end
end

function onCardEnter(parent)
    local platNumber = parent[2]
    cardsOnMonsterPlatform[platNumber] = cardsOnMonsterPlatform[platNumber] + 1
    if cardsOnMonsterPlatform[platNumber] ~= 1 then
        return 0
    end
    parent = parent[1]
    if parent.getVar('value1') == nil then
        for i=1,12 do
            parent.setVar('value'..i, 0)
        end
    end
    if parent.getVar('monsterName') == nil then
        parent.setVar('monsterName', parent.getVar('cardname'))
        parent.setVar('monsterDesc', parent.getVar('carddesc'))
    end
    for i=1,12 do
        monsterPlatformValueCounters[platNumber][i].setValue(parent.getVar('value'..i))
    end
    monsterPlatformNameCard[platNumber].setName(parent.getVar('monsterName'))
    monsterPlatformDescCard[platNumber].setDescription(parent.getVar('monsterDesc'))
end

function onCardLeave(parent)
    local platNumber = parent[2]
    cardsOnMonsterPlatform[platNumber] = cardsOnMonsterPlatform[platNumber] - 1
        if cardsOnMonsterPlatform[platNumber] ~= 0 then
            return 0
        end
    parent = parent[1]
    updateMini(parent, platNumber)
    for i,v in pairs(monsterPlatformValueCounters[platNumber]) do
        monsterPlatformValueCounters[platNumber][i].setValue(0)
    end
    monsterPlatformNameCard[platNumber].setName('')
    monsterPlatformNameCard[platNumber].setDescription('')
    monsterPlatformDescCard[platNumber].setDescription('')
end

function toggleStatCounters(obj)
    local platNumber = obj.getVar('platformNumber')
    local pos = monsterPlatformValueCounters[platNumber][7].getPosition()
    if (pos[2] > 0.8) then
        for i=7,12 do
            pos = monsterPlatformValueCounters[platNumber][i].getPosition()
            monsterPlatformValueCounters[platNumber][i].lock()
            monsterPlatformValueCounters[platNumber][i].setPosition({pos[1], pos[2] - 35, pos[3]})
        end
    elseif (pos[2] < 0.8) then
        for i=7,12 do
            pos = monsterPlatformValueCounters[platNumber][i].getPosition()
            monsterPlatformValueCounters[platNumber][i].lock()
            monsterPlatformValueCounters[platNumber][i].setPosition({pos[1], pos[2] + 35, pos[3]})
        end
    end
end

function cloneCard(obj)
    local platNumber = obj.getVar('platformNumber')
    local params = {}
    local zoneObjs = getObjectFromGUID(monsterPlatformZoneGUID[platNumber]).getObjects()
    for i,v in pairs(zoneObjs) do
        if zoneObjs[i].getVar('cardname') ~= nil then
            local pos = zoneObjs[i].getPosition()
            params.position = {pos[1]-15, pos[2], pos[3]}
            zoneObjs[i].clone(params)
        end
    end
end

function resetPlatform(obj)
    local platNumber = obj.getVar('platformNumber')
    local zoneObjs = getObjectFromGUID(monsterPlatformZoneGUID[platNumber]).getObjects()
    for i,v in pairs(zoneObjs) do
        if zoneObjs[i].getVar('cardname') ~= nil then
            local pos = zoneObjs[i].getPosition()
            zoneObjs[i].clone({pos[1]-15, pos[2]+3, pos[3]})
            zoneObjs[i].destruct()
        end
    end
    for i,v in pairs(monsterPlatformValueCounters[platNumber]) do
        monsterPlatformValueCounters[platNumber][i].setValue(0)
    end
    monsterPlatformNameCard[platNumber].setName('')
    monsterPlatformNameCard[platNumber].setDescription('')
    monsterPlatformDescCard[platNumber].setDescription('')
    cardsOnMonsterPlatform[platNumber] = 0
end

function toggleSecondPlatform()
    local pos = monsterPlatform[2].getPosition()
    if (pos[2] > 1) then
        monsterPlatform[2].lock()
        monsterPlatform[2].setPosition({pos[1],pos[2]-35,pos[3]})
        pos = monsterPlatformNameCard[2].getPosition()
        monsterPlatformNameCard[2].lock()
        monsterPlatformNameCard[2].setPosition({pos[1],pos[2]-35,pos[3]})
        pos = monsterPlatformDescCard[2].getPosition()
        monsterPlatformDescCard[2].lock()
        monsterPlatformDescCard[2].setPosition({pos[1],pos[2]-35,pos[3]})
        for i=1,12 do
            monsterPlatformValueCounters[2][i].lock()
            pos = monsterPlatformValueCounters[2][i].getPosition()
            monsterPlatformValueCounters[2][i].setPosition({pos[1],pos[2]-35,pos[3]})
        end
    elseif (pos[2] < 1) then
        monsterPlatform[2].lock()
        monsterPlatform[2].setPosition({pos[1],pos[2]+35,pos[3]})
        pos = monsterPlatformNameCard[2].getPosition()
        monsterPlatformNameCard[2].lock()
        monsterPlatformNameCard[2].setPosition({pos[1],pos[2]+35,pos[3]})
        pos = monsterPlatformDescCard[2].getPosition()
        monsterPlatformDescCard[2].lock()
        monsterPlatformDescCard[2].setPosition({pos[1],pos[2]+35,pos[3]})
        for i=1,12 do
            monsterPlatformValueCounters[2][i].lock()
            pos = monsterPlatformValueCounters[2][i].getPosition()
            monsterPlatformValueCounters[2][i].setPosition({pos[1],pos[2]+35,pos[3]})
        end
    end
end
