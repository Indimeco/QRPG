function onload(save_state)
    -- Table initialization
    monsterPlatform = {}
    monsterPlatformValueCounterGUIDs = {}
    monsterPlatformTextTool = {}
    monsterPlatformDescCard = {}
    monsterPlatformZoneGUID = {}
    monsterPlatformValueCounters = {}
    DMHealthCounters = {}

    -- Object Config
    invController = getObjectFromGUID('aad6e8')
    invControllerDisplay = getObjectFromGUID('0d093a')

    invControllerButton = {
        ['Red'] = getObjectFromGUID('f2b44d'),
        ['Orange'] = getObjectFromGUID('b189da'),
        ['Yellow'] = getObjectFromGUID('649d04'),
        ['Green'] = getObjectFromGUID('10dea3'),
        ['Blue'] = getObjectFromGUID('0a66ae'),
        ['Purple'] = getObjectFromGUID('23f579')
    }

    invControllerInvCard = {
        ['initiative'] = getObjectFromGUID('bbf673'),
        ['Master'] = getObjectFromGUID('ee09de'),
        ['Red'] = getObjectFromGUID('3f7d23'),
        ['Orange'] = getObjectFromGUID('9865b6'),
        ['Yellow'] = getObjectFromGUID('f26985'),
        ['Green'] = getObjectFromGUID('2780ad'),
        ['Blue'] = getObjectFromGUID('977184'),
        ['Purple'] = getObjectFromGUID('055c17')
    }

    invControllerCharacterSheet = Global.getTable('CharacterSheets')

    -- Player sheet counters ordering STR,DEX,CON,INT,WIS,CHA
    CharactersheetCounterGUIDs = {
        {'ecfc82','5fbb7b','4363c2','665f1f','3ca728','fccced'}, -- Red Player
        {'0d2655','a41d65','365b53','f29eb6','4a2282','bf19eb'}, -- Orange Player
        {'ac80ac','24effb','83aedd','079880','3c15de','a5c79e'}, -- Yellow Player
        {'763818','4f877d','413bdd','53a22d','c01f47','f2cee2'}, -- Green Player
        {'79c545','bb48d1','9e38d1','7c4408','0bb964','5adb6f'}, -- Blue Player
        {'PurpleSTR','PurpleDEX','PurpleCON','PurpleINT','PurpleWIS','PurpleCHA'} -- Purple Player
    }

    DMIsHealthController = getObjectFromGUID('e4fb05')
    playerIsHealthController = getObjectFromGUID('f7eb09')

    DMSkillCounterGUIDs = {'d05e4e','859337','8a0e67','ba1d15','b9fb4c','f403ae'}

    DMHealthCounterGUIDs = {'af016f','283218','0c5edf','2513de','1a039e','591edd'}
    playerHealthCounterGUIDs = {'eb6109','2734fd','5d1212','3503be','c8a982','bf1d7e'}

    monsterPlatform[1] = getObjectFromGUID('eea006')
    monsterPlatform[2] = getObjectFromGUID('5081aa')
    monsterPlatformValueCounterGUIDs_1 = {'1ba1f5','7d7d5f','c0a4e4','a97acb','ce521a','ecccee','f95a0c','a172ae','3ed4a0','5f4dac','b79442','84e811','9107ab'}
    monsterPlatformValueCounterGUIDs_2 = {'64962d','27fad5','6b69ce','136710','ec67c6','4bfdb4','ea3819','825236','d4cde7','622613','d18abd','361bb8','b12726'}
    monsterPlatformTextTool[1] = getObjectFromGUID('667cbb')
    monsterPlatformTextTool[2] = getObjectFromGUID('7a66de')
    monsterPlatformDescCard[1] = getObjectFromGUID('7db223')
    monsterPlatformDescCard[2] = getObjectFromGUID('f30f00')
    monsterPlatformZoneGUID[1] = '7880c3' -- The reading zone for the first platform
    monsterPlatformZoneGUID[2] = 'b1735b' -- The reading zone for the second platform
    activeMiniZone1 = getObjectFromGUID('413e0c') -- The zone in which minis will be updated
    displayEverything = getObjectFromGUID('ebea77') -- The following three are settings for the monster platform
    displaySome = getObjectFromGUID('4fb7c1')
    displayNothing = getObjectFromGUID('4bc9ee')

    initiativeIndicatorBlock = getObjectFromGUID('4a4b1f')
    activeInitiativeZone = getObjectFromGUID('d68432')

    -- Edit below this line at your own risk.

    orderedPlayerColors = {'Red','Orange','Yellow','Green','Blue','Purple'} -- Used to create color based tables

    -- Creates buttons
    invController.setTable('pos',{0,1.289,10.2})
    invController.setTable('rot',{0,0,0})
    Global.call('addButton', {invController.getGUID(),7100,1000,500,'Update','push',self})

    DMIsHealthController.setVar('Controller', 'DM')
    DMIsHealthController.setTable('pos',{0,-0.1,-3.3})
    DMIsHealthController.setTable('rot',{0,270,0})
    Global.call('addButton', {DMIsHealthController.getGUID(),2550,500,300,'The DM','updateHealthController',self})
    playerIsHealthController.setVar('Controller', 'Player')
    playerIsHealthController.setTable('pos',{0,-0.1,-3.3})
    playerIsHealthController.setTable('rot',{0,270,0})
    Global.call('addButton', {playerIsHealthController.getGUID(),2550,500,300,'The Player','updateHealthController',self})

    invControllerInvCard['Master'].setVar('color', 'Master')
    invControllerInvCard['Master'].setTable('pos',{-0.62,3,0.26})
    invControllerInvCard['Master'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['Master'].getGUID(), 280,10,50,'>','scrollUp',self})
    invControllerInvCard['Master'].setTable('pos',{-0.62,3,-0.26})
    invControllerInvCard['Master'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['Master'].getGUID(), 280,10,50,'<','scrollDown',self})
    for i=1,6 do
        if invControllerCharacterSheet[orderedPlayerColors[i]] ~= nil then
            invControllerButton[orderedPlayerColors[i]].setVar('color',orderedPlayerColors[i])
            invControllerButton[orderedPlayerColors[i]].setTable('pos',{0,-0.2,0})
            invControllerButton[orderedPlayerColors[i]].setTable('rot',{180,90,0})
            Global.call('addButton', {invControllerButton[orderedPlayerColors[i]].getGUID(),1350,600,400,orderedPlayerColors[i],'selectPlayer',self})
            invControllerInvCard[orderedPlayerColors[i]].setVar('color', orderedPlayerColors[i])
            invControllerInvCard[orderedPlayerColors[i]].setTable('pos',{-0.62,3,0.26})
            invControllerInvCard[orderedPlayerColors[i]].setTable('rot',{0,90,0})
            Global.call('addButton',{invControllerInvCard[orderedPlayerColors[i]].getGUID(), 280,10,50,'>','scrollUp',self})
            invControllerInvCard[orderedPlayerColors[i]].setTable('pos',{-0.62,3,-0.26})
            invControllerInvCard[orderedPlayerColors[i]].setTable('rot',{0,90,0})
            Global.call('addButton',{invControllerInvCard[orderedPlayerColors[i]].getGUID(), 280,10,50,'<','scrollDown',self})
        end
    end

    monsterPlatform[1].setVar('platformNumber', 1)
    -- Temporarily disabling the toggle stat counters button because it's just clutter
    -- monsterPlatform[1].setTable('pos',{-0.1,0.1,0})
    -- monsterPlatform[1].setTable('rot',{0,-90,0})
    -- Global.call('addButton', {monsterPlatform[1].getGUID(),1900,900,300,'Stat Counters','toggleStatCounters',self})
    monsterPlatform[1].setTable('pos',{-2.15,0.1,6.1})
    monsterPlatform[1].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[1].getGUID(),1900,900,300,'Copy Card','cloneCard',self})
    monsterPlatform[1].setTable('pos',{-2.15,0.1,-6.1})
    monsterPlatform[1].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[1].getGUID(),1900,900,300,'Reset','resetPlatform',self})
    monsterPlatform[1].setTable('pos',{-2.15,0.1,0})
    monsterPlatform[1].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[1].getGUID(),1900,900,300,'2nd Platform','toggleSecondPlatform',self})
    monsterPlatform[1].setTable('pos',{7.1,0.1,0})
    monsterPlatform[1].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[1].getGUID(),7750,900,300,'Update Miniature(s)','forceUpdateMini',self})
    monsterPlatform[2].setVar('platformNumber', 2)
    -- monsterPlatform[2].setTable('pos',{-2.15,0.1,0})
    -- monsterPlatform[2].setTable('rot',{0,-90,0})
    -- Global.call('addButton', {monsterPlatform[2].getGUID(),1900,900,300,'Stat Counters','toggleStatCounters',self})
    monsterPlatform[2].setTable('pos',{-2.15,0.1,6.1})
    monsterPlatform[2].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[2].getGUID(),1900,900,300,'Copy Card','cloneCard',self})
    monsterPlatform[2].setTable('pos',{-2.15,0.1,-6.1})
    monsterPlatform[2].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[2].getGUID(),1900,900,300,'Reset','resetPlatform',self})
    monsterPlatform[2].setTable('pos',{7.1,0.1,0})
    monsterPlatform[2].setTable('rot',{0,-90,0})
    Global.call('addButton', {monsterPlatform[2].getGUID(),7750,900,300,'Update Miniature(s)','forceUpdateMini',self})
    displayEverything.setVar('miniDisplay','Everything')
    displayEverything.setTable('pos',{0,-0.1,-3.3})
    displayEverything.setTable('rot',{0,270,0})
    Global.call('addButton', {displayEverything.getGUID(),2550,500,300,'Display Everything','updateMiniDisplay',self})
    displaySome.setVar('miniDisplay','Some')
    displaySome.setTable('pos',{0,-0.1,-3.3})
    displaySome.setTable('rot',{0,270,0})
    Global.call('addButton', {displaySome.getGUID(),2550,500,300,'Display Info Only','updateMiniDisplay',self})
    displayNothing.setVar('miniDisplay','Nothing')
    displayNothing.setTable('pos',{0,-0.1,-3.3})
    displayNothing.setTable('rot',{0,270,0})
    Global.call('addButton', {displayNothing.getGUID(),2550,500,300,'Display Nothing','updateMiniDisplay',self})

    invControllerInvCard['initiative'].setVar('color','initiative')
    invControllerInvCard['initiative'].setTable('pos',{0,0.8,-0.72})
    invControllerInvCard['initiative'].setTable('rot',{0,180,0})
    Global.call('addButton',{invControllerInvCard['initiative'].getGUID(),450,170,57,'Initiative Roll','callRoutine',self})
    invControllerInvCard['initiative'].setTable('pos',{0,-5,0})
    invControllerInvCard['initiative'].setTable('rot',{0,180,0})
    Global.call('addButton',{invControllerInvCard['initiative'].getGUID(),1,1,1,'Continue','nil',self})
    invControllerInvCard['initiative'].setTable('pos',{0,0.8,0.72})
    invControllerInvCard['initiative'].setTable('rot',{0,180,0})
    Global.call('addButton',{invControllerInvCard['initiative'].getGUID(),450,170,57,'Next Turn','nextTurn',self})
    invControllerInvCard['initiative'].setTable('pos',{-0.62,3,0.26})
    invControllerInvCard['initiative'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['initiative'].getGUID(), 280,10,50,'>','scrollUp',self})
    invControllerInvCard['initiative'].setTable('pos',{-0.62,3,-0.26})
    invControllerInvCard['initiative'].setTable('rot',{0,90,0})
    Global.call('addButton',{invControllerInvCard['initiative'].getGUID(), 280,10,50,'<','scrollDown',self})
    initiativeIndicatorBlock.setTable('pos',{-0.75,0.5,0})
    initiativeIndicatorBlock.setTable('rot',{0,-90,0})

    -- Creates objects from counter GUIDs
    for key,value in ipairs(CharactersheetCounterGUIDs) do
        if invControllerCharacterSheet[orderedPlayerColors[i]] ~= nil then
            invControllerCharacterSheet[orderedPlayerColors[i]].setTable('counters_t',createCounters(value,6))
        end
    end

    monsterPlatformValueCounters[1] = createCounters(monsterPlatformValueCounterGUIDs_1,13)
    monsterPlatformValueCounters[2] = createCounters(monsterPlatformValueCounterGUIDs_2,13)

    for i=1,6 do
        DMHealthCounters[orderedPlayerColors[i]] = getObjectFromGUID(DMHealthCounterGUIDs[i])
    end
    DMSkillCounters = createCounters(DMSkillCounterGUIDs,6)
    playerHealthCounters = createCounters(playerHealthCounterGUIDs,6)

    -- Table describing the width of all basic characters in a max 100,000 system
    characterWidthTable = {
        ['`'] = 2381, ['~'] = 2381, ['1'] = 1724, ['!'] = 1493, ['2'] = 2381,
        ['@'] = 4348, ['3'] = 2381, ['#'] = 3030, ['4'] = 2564, ['$'] = 2381,
        ['5'] = 2381, ['%'] = 3846, ['6'] = 2564, ['^'] = 2564, ['7'] = 2174,
        ['&'] = 2777, ['8'] = 2564, ['*'] = 2174, ['9'] = 2564, ['('] = 1724,
        ['0'] = 2564, [')'] = 1724, ['-'] = 1724, ['_'] = 2381, ['='] = 2381,
        ['+'] = 2381, ['q'] = 2564, ['Q'] = 3226, ['w'] = 3704, ['W'] = 4167,
        ['e'] = 2174, ['E'] = 2381, ['r'] = 1724, ['R'] = 2777, ['t'] = 1724,
        ['T'] = 2381, ['y'] = 2564, ['Y'] = 2564, ['u'] = 2564, ['U'] = 3030,
        ['i'] = 1282, ['I'] = 1282, ['o'] = 2381, ['O'] = 3226, ['p'] = 2564,
        ['P'] = 2564, ['['] = 1724, ['{'] = 1724, [']'] = 1724, ['}'] = 1724,
        ['|'] = 1493, ['\\'] = 1923, ['a'] = 2564, ['A'] = 2777, ['s'] = 1923,
        ['S'] = 2381, ['d'] = 2564, ['D'] = 3030, ['f'] = 1724, ['F'] = 2381,
        ['g'] = 2564, ['G'] = 2777, ['h'] = 2564, ['H'] = 3030, ['j'] = 1075,
        ['J'] = 1282, ['k'] = 2381, ['K'] = 2777, ['l'] = 1282, ['L'] = 2174,
        [';'] = 1282, [':'] = 1282, ['\''] = 855, ['"'] = 1724, ['z'] = 1923,
        ['Z'] = 2564, ['x'] = 2381, ['X'] = 2777, ['c'] = 1923, ['C'] = 2564,
        ['v'] = 2564, ['V'] = 2777, ['b'] = 2564, ['B'] = 2564, ['n'] = 2564,
        ['N'] = 3226, ['m'] = 3846, ['M'] = 3846, [','] = 1282, ['<'] = 2174,
        ['.'] = 1282, ['>'] = 2174, ['/'] = 1923, ['?'] = 2174, [' '] = 1282,
        ['\t'] = 5128, ['\r'] = 0, ['\n'] = 100000
    }

    -- Setting variables from the JSON save
    local savedVars = JSON.decode(save_state)
    invControllerHiddenTextAbove = {
        ['Red'] = savedVars['redAbove'],
        ['Orange'] = savedVars['orangeAbove'],
        ['Yellow'] = savedVars['yellowAbove'],
        ['Green'] = savedVars['greenAbove'],
        ['Blue'] = savedVars['blueAbove'],
        ['Purple'] = savedVars['purpleAbove'],
        ['initiative'] = savedVars['initiativeAbove'],
        ['Master'] = ''
    }

    invControllerHiddenTextBelow = {
        ['Red'] = savedVars['redBelow'],
        ['Orange'] = savedVars['orangeBelow'],
        ['Yellow'] = savedVars['yellowBelow'],
        ['Green'] = savedVars['greenBelow'],
        ['Blue'] = savedVars['blueBelow'],
        ['Purple'] = savedVars['purpleBelow'],
        ['initiative'] = savedVars['initiativeBelow'],
        ['Master'] = ''
    }

    invControllerStartingText = {
        ['Red'] = savedVars['redStarting'],
        ['Orange'] = savedVars['orangeStarting'],
        ['Yellow'] = savedVars['yellowStarting'],
        ['Green'] = savedVars['greenStarting'],
        ['Blue'] = savedVars['blueStarting'],
        ['Purple'] = savedVars['purpleStarting'],
        ['initiative'] = savedVars['initiativeStarting']
    }

    healthController = savedVars['healthController']
    miniDisplay = savedVars['miniDisplay']
    cardsOnMonsterPlatform = {}
    cardsOnMonsterPlatform[1] = savedVars['cardsOnMonsterPlatform1']
    cardsOnMonsterPlatform[2] = savedVars['cardsOnMonsterPlatform2']
    statCountersToggled = {}
    statCountersToggled[1] = savedVars['statCountersToggled1']
    statCountersToggled[2] = savedVars['statCountersToggled2']
    secondPlatformToggled = savedVars['secondPlatformToggled']
    initiativeBroadcastState = savedVars['initiativeBroadcastState']

    -- JSON onSave prep
    -- invControllerHiddenTextAbove['Red'] = ''
    -- invControllerHiddenTextAbove['Orange'] = ''
    -- invControllerHiddenTextAbove['Yellow'] = ''
    -- invControllerHiddenTextAbove['Green'] = ''
    -- invControllerHiddenTextAbove['Blue'] = ''
    -- invControllerHiddenTextAbove['Purple'] = ''
    -- invControllerHiddenTextBelow['Red'] = ''
    -- invControllerHiddenTextBelow['Orange'] = ''
    -- invControllerHiddenTextBelow['Yellow'] = ''
    -- invControllerHiddenTextBelow['Green'] = ''
    -- invControllerHiddenTextBelow['Blue'] = ''
    -- invControllerHiddenTextBelow['Purple'] = ''
    -- invControllerStartingText['Red'] = invControllerInvCard['Red'].getDescription()
    -- invControllerStartingText['Orange'] = invControllerInvCard['Orange'].getDescription()
    -- invControllerStartingText['Yellow'] = invControllerInvCard['Yellow'].getDescription()
    -- invControllerStartingText['Green'] = invControllerInvCard['Green'].getDescription()
    -- invControllerStartingText['Blue'] = invControllerInvCard['Blue'].getDescription()
    -- invControllerStartingText['Purple'] = invControllerInvCard['Purple'].getDescription()
    -- healthController = 'DM'
    -- miniDisplay = 'Everything'
    -- cardsOnMonsterPlatform = {}
    -- cardsOnMonsterPlatform[1] = 0
    -- cardsOnMonsterPlatform[2] = 0
    -- statCountersToggled = {}
    -- statCountersToggled[1] = 0
    -- statCountersToggled[2] = 0
    -- secondPlatformToggled = 0
    -- initiativeBroadcastState = 'Off'

    -- Additional setup
    invControllerInvCard['Master'].setName('Inventory Manager')
    invControllerInvCard['Master'].setDescription([[Select a player below and their inventory will be pulled to this card. Any changes you may have made will be sent when clicking "Update"\n\nSelecting a player will tint the highlight bar above with the respective color and the player\'s skills be updated in the counters above that.]])
    invControllerStartingText['Master'] = invControllerInvCard['Master'].getDescription()
    invControllerDisplay.setColorTint({1,1,1}) -- Set highlight bar to White

    for i=1,6 do
        DMSkillCounters[i].setValue(0)
    end

    seconds = 0 -- Used by the update function
    frame = 0 -- Used by the update function

    initiativeLabels = {'Initiative Roll','Cancel'}
    initiativeTracker = 0
    Global.call('addButton',{initiativeIndicatorBlock.getGUID(), 1050,270,87,'Next Turn Broadcast is: '..initiativeBroadcastState,'toggleInitiativeBroadcast',self})

    monsterPlatformTextTool[1].interactable = false
    monsterPlatformTextTool[2].interactable = false
end

function onSave() -- Saving all of the necessary variables to an encoded JSON variable
    local savedVars = {
        ['redAbove'] = invControllerHiddenTextAbove['Red'],
        ['orangeAbove'] = invControllerHiddenTextAbove['Orange'],
        ['yellowAbove'] = invControllerHiddenTextAbove['Yellow'],
        ['greenAbove'] = invControllerHiddenTextAbove['Green'],
        ['blueAbove'] = invControllerHiddenTextAbove['Blue'],
        ['purpleAbove'] = invControllerHiddenTextAbove['Purple'],
        ['initiativeAbove'] = invControllerHiddenTextAbove['initiative'],
        ['redBelow'] = invControllerHiddenTextBelow['Red'],
        ['orangeBelow'] = invControllerHiddenTextBelow['Orange'],
        ['yellowBelow'] = invControllerHiddenTextBelow['Yellow'],
        ['greenBelow'] = invControllerHiddenTextBelow['Green'],
        ['blueBelow'] = invControllerHiddenTextBelow['Blue'],
        ['purpleBelow'] = invControllerHiddenTextBelow['Purple'],
        ['initiativeBelow'] = invControllerHiddenTextBelow['initiative'],
        ['redStarting'] = invControllerStartingText['Red'],
        ['orangeStarting'] = invControllerStartingText['Orange'],
        ['yellowStarting'] = invControllerStartingText['Yellow'],
        ['greenStarting'] = invControllerStartingText['Green'],
        ['blueStarting'] = invControllerStartingText['Blue'],
        ['purpleStarting'] = invControllerStartingText['Purple'],
        ['initiativeStarting'] = invControllerStartingText['initiative'],
        ['healthController'] = healthController,
        ['miniDisplay'] = miniDisplay,
        ['cardsOnMonsterPlatform1'] = cardsOnMonsterPlatform[1],
        ['cardsOnMonsterPlatform2'] = cardsOnMonsterPlatform[2],
        ['statCountersToggled1'] = statCountersToggled[1],
        ['statCountersToggled2'] = statCountersToggled[2],
        ['secondPlatformToggled'] = secondPlatformToggled,
        ['initiativeBroadcastState'] = 'Off'
    }
    return JSON.encode(savedVars)
end

function update() -- Used to keep the health counters in sync
    frame = frame + 1 -- Counts Frames --
    if frame%60==0 then  --Every 60 Frames--
        seconds=seconds+1 --Adds a second--
        if seconds%2==0 then updateCounters()
        end
    end
end

function createCounters(table, counters) -- Receives a table of GUIDs, returns a table of objects.
    newTable = {}
    for i=1,counters do
        newTable[i] = getObjectFromGUID(table[i])
    end
    return newTable
end

function selectPlayer(obj) -- Changes selection of player and sets color of the highlight bar
-- Copies the selected player's inventory to the invControllerInvCard['Master']
-- This function is called from a button - ergo obj is the button's object that made the call
    colorSelector = obj.getVar('color')
    updateSkillCounters(invControllerCharacterSheet[colorSelector].getTable('counters_t'))

    local fullText = getFullText(colorSelector)
    local newPage = getPage(fullText)
    invControllerInvCard['Master'].setDescription(newPage)
    invControllerHiddenTextAbove['Master'] = ''
    invControllerHiddenTextBelow['Master'] = removeNewline(removeNewline(plainReplace(fullText,newPage,''),'Beginning'),'Ending')
    invControllerStartingText['Master'] = invControllerInvCard['Master'].getDescription()

    setDisplayColor(colorSelector)
end

function push() -- Updates the selected player's inventory to a copy of the invControllerInvCard['Master']
    if colorSelector == nil then
        print("Select a color first!")
    else
        local fullText = getFullText('Master')
        local newPage = getPage(fullText)
        invControllerInvCard[colorSelector].setDescription(newPage)
        invControllerHiddenTextAbove[colorSelector] = ''
        invControllerHiddenTextBelow[colorSelector] = removeNewline(removeNewline(plainReplace(fullText,newPage,''),'Beginning'),'Ending')
    end
end

function scrollUp(obj) -- Concatenates the last 9 lines of the auxiliary inventory to the beginning of the main inventory.
-- This function is called from a button - ergo obj is the button that made the call.
    local color = obj.getVar('color')
    if invControllerHiddenTextAbove[color] ~= '' then
        local newPage = string.reverse(getPage(string.reverse(invControllerHiddenTextAbove[color])))..'\n'
        if obj.getDescription() ~= '' then
            local i = string.len(newPage)
            newPage = getPage(newPage..obj.getDescription())
            local j = string.len(newPage)
            if i < j then
                invControllerHiddenTextAbove[color] = removeNewline(plainReplace(invControllerHiddenTextAbove[color],string.sub(newPage,1,i-1),''),'Ending')
                invControllerHiddenTextBelow[color] = removeNewline(removeNewline(plainReplace(obj.getDescription(),string.sub(newPage,i+1,j),'')..'\n'..invControllerHiddenTextBelow[color],'Beginning'),'Ending')
            else
                invControllerHiddenTextAbove[color] = removeNewline(plainReplace(invControllerHiddenTextAbove[color],newPage,''),'Ending')
                invControllerHiddenTextBelow[color] = removeNewline(obj.getDescription()..'\n'..invControllerHiddenTextBelow[color],'Ending')
            end
        else
            invControllerHiddenTextAbove[color] = removeNewline(plainReplace(invControllerHiddenTextAbove[color],removeNewline(removeNewline(newPage,'Ending'),'Beginning'),''),'Ending')
        end
        obj.setDescription(removeNewline(removeNewline(newPage,'Ending'),'Beginning'))
        invControllerStartingText[color] = obj.getDescription()
    end
end

function scrollDown(obj) -- Concatenates the first 9 lines of the main inventory to the end of the auxiliary inventory.
-- This function is called from a button - ergo obj is the button that made the call.
    local color = obj.getVar('color')
    if obj.getDescription() ~= '' or invControllerHiddenTextBelow[color] ~= '' then
        local newPage = getPage(obj.getDescription())
        invControllerHiddenTextAbove[color] = removeNewline(invControllerHiddenTextAbove[color]..'\n'..newPage,'Beginning')
        local tempPage = string.sub(obj.getDescription(),string.len(newPage)+1,-1)
        if tempPage ~= '' then
            newPage = getPage(removeNewline(removeNewline(tempPage..'\n'..invControllerHiddenTextBelow[color],'Ending'),'Beginning'))
            if string.len(newPage) < string.len(tempPage) then
               tempPage = removeNewline(removeNewline(tempPage,'Ending'),'Beginning')
           else
               tempPage = ''
           end
        else
            tempPage = ''
            newPage = getPage(removeNewline(removeNewline(invControllerHiddenTextBelow[color],'Ending'),'Beginning'))
        end

        local extraLength1 = getLines(obj.getDescription())
        local tempStartingText = getLines(invControllerStartingText[color])
        obj.setDescription(removeNewline(removeNewline(newPage,'Beginning'),'Ending'))
        local extraLength2 = extraLength1['lineCount'] - tempStartingText['lineCount']
        local extraLength3 = getLines(invControllerHiddenTextBelow[color])
        local extraLength4 = tempStartingText['lineCount'] - extraLength2
        invControllerStartingText[color] = obj.getDescription()
        if extraLength2 > 0 and extraLength4 <= extraLength3['lineCount'] and extraLength4 > 0 then
            local extraLength5 = extraLength3[extraLength4]
            invControllerHiddenTextBelow[color] = removeNewline(string.sub(tempPage..invControllerHiddenTextBelow[color],extraLength5+1),'Beginning')
        else
            if string.len(obj.getDescription()) ~= string.len(invControllerHiddenTextBelow[color]) then
                invControllerHiddenTextBelow[color] = removeNewline(removeNewline(string.sub(tempPage..invControllerHiddenTextBelow[color],string.len(obj.getDescription())+1),'Beginning'),'Ending')
            else
                invControllerHiddenTextBelow[color] = ''
            end
        end
    end
end

function getPage(invStr) -- Iterates through the str and sums the estimated line length based on characterWidthTable for each character in a max 100000 system. Margin for error is 200.
    local lineWidth = 0
    local lineCount = 0
    local placeholder = 1
    local key = ''
    local page = ''
    local i = 1
    while lineCount ~= 9 do
        key = string.sub(invStr, i, i)
        if key == '' then
            page = page..string.sub(invStr,placeholder,i)
            break
        end
        lineWidth = lineWidth + characterWidthTable[key]
        if lineWidth > 99878 then
            if key == '\n' then
                page = page..string.sub(invStr,placeholder,i-1)
                placeholder = i
            else
                page = page..string.sub(invStr,placeholder,i)
                placeholder = i + 1
            end
            lineCount = lineCount + 1
            lineWidth = 0
        end
        i = i + 1
    end
    return page
end

function getLines(str) -- Returns a table countaining the number of lines in a string as well as the location of the end of each line.
    local lineWidth = 0
    local lineCount = 0
    local length = string.len(str)
    local placeholder = 1
    local key = ''
    local lineTable = {}
    local i = 1
    while i < 2+string.len(str) do
        key = string.sub(str, i, i)
        if key == '' then
            lineCount = lineCount + 1
            break
        end
        lineWidth = lineWidth + characterWidthTable[key]
        if lineWidth > 99878 then
            if key == '\n' then
                lineTable[lineCount+1] = i-1
                placeholder = i
            else
                lineTable[lineCount+1] = i
                placeholder = i + 1
            end
            lineCount = lineCount + 1
            lineWidth = 0
        end
        i = i + 1
    end
    lineTable['length'] = length
    lineTable['lineCount'] = lineCount
    return lineTable
end

function removeNewline(str, location) -- Removes all \n characters from either the beginning or end of a string until a non \n character
    if location == 'Beginning' then
        while string.sub(str,1,1) == '\n' do
            str = string.sub(str,2,-1)
        end
        return str
    elseif location == 'Ending' then
        while string.sub(str,-1,-1) == '\n' do
            str = string.sub(str,1,-2)
        end
        return str
    end
end

function callGetFullText(table) -- Used as an accessor for other objects to getFullText.
    return getFullText(table[1])
end

function getFullText(color) -- Returns the full data of above, current and below on notecards as a single string.
    local fullText = invControllerInvCard[color].getDescription()
    if invControllerHiddenTextAbove[color] ~= '' then
        fullText = invControllerHiddenTextAbove[color]..'\n'..fullText
    end
    if invControllerHiddenTextBelow[color] ~= '' then
        fullText = fullText..'\n'..invControllerHiddenTextBelow[color]
    end
    return fullText
end

function plainReplace(str, pattern, replacement) -- Finds an exact copy of the pattern within the string and exchanges it for the replacement
    local x,y = str:find(pattern,1,true)
    if x==nil then
       return str
    else
       return str:sub(1,x-1)..replacement..str:sub(y+1)
    end
end

function setDisplayColor(color) -- Sets color of highlight bar, receives color as string | setDisplayColor("blue")
    local tint = {}
    tint['Red'] = {0.856,0.1,0.094}
    tint['Orange'] = {0.956,0.392,0.113}
    tint['Yellow'] = {0.905,0.898,0.172}
    tint['Green'] = {0.192,0.701,0.168}
    tint['Blue'] = {0.118,0.53,1.0}
    tint['Purple'] = {0.627,0.125,0.941}
    invControllerDisplay.setColorTint(tint[color])
end

function updateCounters() -- Called from the Update function to keep the health counters in sync
    if healthController=='DM' then
        for i=1,6 do
            if invControllerCharacterSheet[orderedPlayerColors[i]] ~= nil then
                playerHealthCounters[i].setValue(DMHealthCounters[orderedPlayerColors[i]].getValue())
            end
        end
    else
        for i=1,6 do
            if invControllerCharacterSheet[orderedPlayerColors[i]] ~= nil then
                DMHealthCounters[orderedPlayerColors[i]].setValue(playerHealthCounters[i].getValue())
            end
        end
    end
end

function toggleHealthCounter(color,flag) -- Hides or reveals a DM Health Counter for when a player changes color.
    local pos = DMHealthCounters[color].getPosition()
    if flag == 0 then
        pos['y'] = -5
    else
        pos['y'] = 1
    end
    DMHealthCounters[color].setPosition(pos)
end

function toggleInvControllerButton(color,flag) -- Removes or adds a button on the invController for when a player changes color.
    if flag == 0 then
        invControllerButton[color].clearButtons()
    else
        invControllerButton[color].setVar('color',color)
        invControllerButton[color].setTable('pos',{0,-0.2,0})
        invControllerButton[color].setTable('rot',{180,90,0})
        Global.call('addButton', {invControllerButton[color].getGUID(),1350,600,400,color,'selectPlayer',self})
    end
end

function updateSkillCounters(skillCounters) -- Gets the STR, DEX, etc., from the player when selectPlayer is called
    for i=1,6 do
        DMSkillCounters[i].setValue(tonumber(skillCounters[i].getValue()))
    end
end

function updateHealthController(obj) -- Changes the direction that health counters are synced
    if obj.getVar('Controller') == 'DM' then
        healthController = 'DM'
        DMIsHealthController.setColorTint({0,1,0})
        playerIsHealthController.setColorTint({0,0,0})
    elseif obj.getVar('Controller') == 'Player' then
        healthController = 'Player'
        DMIsHealthController.setColorTint({0,0,0})
        playerIsHealthController.setColorTint({0,1,0})
    end
end

function callRoutine() -- Accesses the Roll core to begin the initiative call and manages buttons.
    startLuaCoroutine(getObjectFromGUID('ROLL'),'initiativeCall')
    initiativeTracker = 1 - initiativeTracker
    local params = invControllerInvCard['initiative'].getButtons()
    params[1]['label'] = initiativeLabels[initiativeTracker+1]
    params[1]['click_function'] = 'cancelInit'
    params[1]['position'] = {-0.26,0.8,-0.72}
    params[1]['width'] = 250
    invControllerInvCard['initiative'].editButton(params[1])
    params[2]['click_function'] = 'getInitiative'
    params[2]['position'] = {0.26,0.8,-0.72}
    params[2]['width'] = 250
    params[2]['height'] = 170
    params[2]['font_size'] = 57
    invControllerInvCard['initiative'].editButton(params[2])
end

function cancelInit() -- Accesses the Roll core to end the initiative call and manages buttons.
    getObjectFromGUID('ROLL').call('cleanupInitiative')
    initiativeTracker = 1 - initiativeTracker
    local params = invControllerInvCard['initiative'].getButtons()
    params[1]['label'] = initiativeLabels[initiativeTracker+1]
    params[1]['click_function'] = 'callRoutine'
    params[1]['position'] = {0,0.8,-0.72}
    params[1]['width'] = 450
    invControllerInvCard['initiative'].editButton(params[1])
    params[2]['click_function'] = 'nil'
    params[2]['position'] = {0,-5,0}
    params[2]['width'] = 1
    params[2]['height'] = 1
    params[2]['font_size'] = 1
    invControllerInvCard['initiative'].editButton(params[2])
end

function getInitiative() -- Called when the DM continues after the players have rolled. Sets the initiative card and gathers monster initiative.
    cancelInit()
    invControllerInvCard['initiative'].setDescription('')
    invControllerHiddenTextAbove['initiative'] = ''
    invControllerHiddenTextBelow['initiative'] = ''
    invControllerStartingText['initiative'] = ''
    playerInitiatives = getObjectFromGUID('ROLL').getTable('initiativeReturnTable')
    local name
    initiatives = {}
    for i,v in pairs (playerInitiatives) do
        table.insert(initiatives, playerInitiatives[i])
    end
    local zoneObjs = activeInitiativeZone.getObjects()
    for i,v in pairs(zoneObjs) do
        if zoneObjs[i].getVar('cardname') ~= nil and zoneObjs[i].getRotation()[3] <= 0 then
            if zoneObjs[i].getName() ~= '' then
                name = zoneObjs[i].getName()
            else name = zoneObjs[i].getVar('monsterName')
            end
            table.insert(initiatives, {name, math.random(20) + zoneObjs[i].getVar('initiative')})
        end
    end
    initiatives = table.sort(initiatives, compare)
    invControllerInvCard['initiative'].setName('Up Next is '..initiatives[1][1]..': '..initiatives[1][2])
    for i,v in pairs(initiatives) do
        if i > 1 then
            invControllerInvCard['initiative'].setDescription(invControllerInvCard['initiative'].getDescription()..initiatives[i][1]..': '..initiatives[i][2]..'\n')
        end
    end
    invControllerInvCard['initiative'].setDescription(removeNewline(invControllerInvCard['initiative'].getDescription(),'Ending'))
end

function compare(a,b) -- Describes the sorting mechanism for getInitiative.
  return a[2] > b[2]
end

function nextTurn() -- Takes the next line of the initiative card and sets it as the name; takes the name and puts it on the bottom.
    local fullText = getFullText('initiative')
    local i = string.find(fullText,'\n',1)
    invControllerHiddenTextAbove['initiative'] = ''
    invControllerHiddenTextBelow['initiative'] = ''
    invControllerStartingText['initiative'] = invControllerInvCard['initiative'].getDescription()
    invControllerInvCard['initiative'].setDescription(string.sub(fullText,i+1)..'\n'..string.sub(invControllerInvCard['initiative'].getName(),12))
    invControllerInvCard['initiative'].setName('Up Next is '..string.sub(fullText,1,i-1))
    if initiativeBroadcastState == 'On' then
      printToAll(invControllerInvCard['initiative'].getName(),{0,1,0})
    end
end

function toggleInitiativeBroadcast() -- Changes whether, on clicking next turn, the console will print the title of the card to all players.
  local params = initiativeIndicatorBlock.getButtons()
  if initiativeBroadcastState == 'On' then
    params[1]['label'] = 'Next Turn Broadcast is: Off'
    initiativeIndicatorBlock.editButton(params[1])
    initiativeBroadcastState = 'Off'
  else
    params[1]['label'] = 'Next Turn Broadcast is: On'
    initiativeIndicatorBlock.editButton(params[1])
    initiativeBroadcastState = 'On'
  end
end

function forceUpdateMini(obj) -- Finds the card within the monster platform scripting zone and sends it to the core updateMini function.
    local parent
    local platNumber = obj.getVar('platformNumber')
    local zoneObjs = getObjectFromGUID(monsterPlatformZoneGUID[platNumber]).getObjects()
    for i,v in pairs(zoneObjs) do
        if zoneObjs[i].getVar('cardname') ~= nil then
            parent = zoneObjs[i]
        end
    end
    if parent ~= nil then
        updateMini(parent, platNumber)
    end
end

function updateMini(parent, platNumber) -- Takes a monster card and sends its values to be concatenated into the description of its children miniatures.
    for i=1,12 do
        parent.setVar('value'..i, monsterPlatformValueCounters[platNumber][i].getValue())
    end
    parent.setVar('initiative',monsterPlatformValueCounters[platNumber][13].getValue())
    parent.setVar('monsterName', monsterPlatformTextTool[platNumber].getValue():gsub("[%[%]]", "%%%0"))
    parent.setVar('monsterDesc', monsterPlatformDescCard[platNumber].getDescription():gsub("[%[%]]", "%%%0"))

    -- Encodes values into the card's script to be preserved across saves. Possibly a JSON rework could be better here but it works fine.
    local tempScript = parent.getLuaScript()
    local QRPGVars = '--*&\n--This is QRPG code designed for use with the monster platform.\n'
    for i = 1,12 do
        QRPGVars = QRPGVars..'value'..i..' = '..monsterPlatformValueCounters[platNumber][i].getValue()..'\n'
    end
    QRPGVars = QRPGVars..'initiative = '..monsterPlatformValueCounters[platNumber][13].getValue()..'\n'
    QRPGVars = QRPGVars..'monsterName = \[\['..monsterPlatformTextTool[platNumber].getValue()..'\]\]\n'..'monsterDesc = \[\['..monsterPlatformDescCard[platNumber].getDescription()..'\]\]\n--*&'

    if string.find(tempScript,'--*&') then
        local i = string.find(tempScript,'--*&',1)
        local j = string.find(tempScript,'--*&',i+4)
        parent.setLuaScript(string.sub(tempScript,1,i-1)..QRPGVars..string.sub(tempScript,j+4))
    else
        parent.setLuaScript(QRPGVars..'\n\n'..tempScript)
    end
    searchForMini(activeMiniZone1.getObjects(), parent, platNumber)
    -- Add additional zones to search here.
end

function searchForMini(objTable, parent, platNumber)  -- Searches the world and sets children miniatures with the correct descriptions based on display setting.
    local parentGUID = parent.getGUID()
    for i,v in pairs(objTable) do
        if objTable[i].getVar('mcardguid') == parentGUID then
            if self.getVar('miniDisplay') == 'Everything' or self.getVar('miniDisplay') == 'Some' then
                objTable[i].setName(parent.getVar('monsterName'))
                local tempDesc = parent.getVar('monsterDesc')
                if self.getVar('miniDisplay') == 'Some' then
                    objTable[i].setDescription(tempDesc)
                else
                    objTable[i].setDescription('')
                    for j=1,6 do
                        if monsterPlatformValueCounters[platNumber][j].getName() ~= '' then
                            objTable[i].setDescription(objTable[i].getDescription()..monsterPlatformValueCounters[platNumber][j].getName()..': '..monsterPlatformValueCounters[platNumber][j].getValue()..'    ')
                        end
                    end
                    objTable[i].setDescription(string.sub(objTable[i].getDescription(), 1, -5)..'\n'..tempDesc)
                end
            elseif self.getVar('miniDisplay') == 'Nothing' then
                objTable[i].setName('')
                objTable[i].setDescription('')
            end
        end
    end
end

function updateMiniDisplay(obj) -- Sets the variable to determine what information is sent to the miniatures.
        if obj.getVar('miniDisplay') == 'Everything' then
            miniDisplay = 'Everything'
            displayEverything.setColorTint({0,1,0})
            displaySome.setColorTint({0,0,0})
            displayNothing.setColorTint({0,0,0})
        elseif obj.getVar('miniDisplay') == 'Some' then
            miniDisplay = 'Some'
            displayEverything.setColorTint({0,0,0})
            displaySome.setColorTint({0,1,0})
            displayNothing.setColorTint({0,0,0})
        elseif obj.getVar('miniDisplay') == 'Nothing' then
            miniDisplay = 'Nothing'
            displayEverything.setColorTint({0,0,0})
            displaySome.setColorTint({0,0,0})
            displayNothing.setColorTint({0,1,0})
        end
end

function onCardEnter(parent) -- Called from the Global onObjectEnterScriptingZone function to realize the card on the platform.
    local platNumber = parent[2]
    cardsOnMonsterPlatform[platNumber] = cardsOnMonsterPlatform[platNumber] + 1
    if cardsOnMonsterPlatform[platNumber] ~= 1 then
        return 0
    end
    parent = parent[1]
    if parent.getVar('value1') == nil then
        for i=1,12 do
            parent.setVar('value'..i, 0)
        end
        parent.setVar('initiative', 0)
    end
    if parent.getVar('monsterName') == nil then
        parent.setVar('monsterName', parent.getVar('cardname'))
        parent.setVar('monsterDesc', parent.getVar('carddesc'))
    end
    if parent.getName() ~= '' then
        parent.setVar('monsterName', parent.getName())
    else
        parent.setVar('monsterName', parent.getVar('cardname'))
    end
    for i=1,12 do
        monsterPlatformValueCounters[platNumber][i].setValue(parent.getVar('value'..i))
    end
    monsterPlatformValueCounters[platNumber][13].setValue(parent.getVar('initiative'))
    monsterPlatformTextTool[platNumber].setValue(parent.getVar('monsterName'))
    monsterPlatformDescCard[platNumber].setDescription(parent.getVar('monsterDesc'))
end

function onCardLeave(parent) -- Called from the Global onObjectLeaveScriptingZone function to clean the platform.
    local platNumber = parent[2]
    cardsOnMonsterPlatform[platNumber] = cardsOnMonsterPlatform[platNumber] - 1
        if cardsOnMonsterPlatform[platNumber] ~= 0 then
            return 0
        end
    parent = parent[1]
    updateMini(parent, platNumber)
    for i,v in pairs(monsterPlatformValueCounters[platNumber]) do
        monsterPlatformValueCounters[platNumber][i].setValue(0)
    end
    monsterPlatformTextTool[platNumber].setValue(' ')
    monsterPlatformDescCard[platNumber].setDescription('')
end

function cloneCard(obj) -- Copies and pastes the card(s) on the platform.
    local platNumber = obj.getVar('platformNumber')
    local params = {}
    local zoneObjs = getObjectFromGUID(monsterPlatformZoneGUID[platNumber]).getObjects()
    for i,v in pairs(zoneObjs) do
        if zoneObjs[i].getVar('cardname') ~= nil then
            local pos = zoneObjs[i].getPosition()
            params.position = {pos[1]-5, pos[2]+3, pos[3]}
            zoneObjs[i].clone(params)
        end
    end
end

function resetPlatform(obj) -- Debug button to completely reset the platform and its associated variables.
    local platNumber = obj.getVar('platformNumber')
    local zoneObjs = getObjectFromGUID(monsterPlatformZoneGUID[platNumber]).getObjects()
    for i,v in pairs(zoneObjs) do
        if zoneObjs[i].getVar('cardname') ~= nil then
            local pos = zoneObjs[i].getPosition()
            zoneObjs[i].clone({pos[1]-15, pos[2]+3, pos[3]})
            zoneObjs[i].destruct()
        end
    end
    for i,v in pairs(monsterPlatformValueCounters[platNumber]) do
        monsterPlatformValueCounters[platNumber][i].setValue(0)
    end
    monsterPlatformTextTool[platNumber].setValue(' ')
    monsterPlatformDescCard[platNumber].setDescription('')
    cardsOnMonsterPlatform[platNumber] = 0
end

function toggleStatCounters(obj) -- Hides the second set of counters under the table.
    local platNumber = obj.getVar('platformNumber')
    local pos
    if statCountersToggled[platNumber] == 0 then
        for i=7,12 do
            pos = monsterPlatformValueCounters[platNumber][i].getPosition()
            monsterPlatformValueCounters[platNumber][i].lock()
            monsterPlatformValueCounters[platNumber][i].setPosition({pos[1], pos[2] - 35, pos[3]})
        end
        statCountersToggled[platNumber] = 1
    else
        for i=7,12 do
            pos = monsterPlatformValueCounters[platNumber][i].getPosition()
            monsterPlatformValueCounters[platNumber][i].lock()
            monsterPlatformValueCounters[platNumber][i].setPosition({pos[1], pos[2] + 35, pos[3]})
        end
        statCountersToggled[platNumber] = 0
    end
end

function toggleSecondPlatform() -- Hides the second platform under the table.
    local pos = monsterPlatform[2].getPosition()
    if secondPlatformToggled == 0 then
        monsterPlatform[2].lock()
        monsterPlatform[2].setPosition({pos[1],pos[2]-35,pos[3]})
        pos = monsterPlatformTextTool[2].getPosition()
        monsterPlatformTextTool[2].setPosition({pos[1],pos[2]-35,pos[3]})
        pos = monsterPlatformDescCard[2].getPosition()
        monsterPlatformDescCard[2].lock()
        monsterPlatformDescCard[2].setPosition({pos[1],pos[2]-35,pos[3]})
        for i=1,13 do
            monsterPlatformValueCounters[2][i].lock()
            pos = monsterPlatformValueCounters[2][i].getPosition()
            monsterPlatformValueCounters[2][i].setPosition({pos[1],pos[2]-35,pos[3]})
        end
        secondPlatformToggled = 1
    else
        monsterPlatform[2].lock()
        monsterPlatform[2].setPosition({pos[1],pos[2]+35,pos[3]})
        pos = monsterPlatformTextTool[2].getPosition()
        monsterPlatformTextTool[2].setPosition({pos[1],pos[2]+35,pos[3]})
        pos = monsterPlatformDescCard[2].getPosition()
        monsterPlatformDescCard[2].lock()
        monsterPlatformDescCard[2].setPosition({pos[1],pos[2]+35,pos[3]})
        for i=1,13 do
            monsterPlatformValueCounters[2][i].lock()
            pos = monsterPlatformValueCounters[2][i].getPosition()
            monsterPlatformValueCounters[2][i].setPosition({pos[1],pos[2]+35,pos[3]})
        end
        secondPlatformToggled = 0
    end
end
